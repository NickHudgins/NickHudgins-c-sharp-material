----
1.  To begin, open your terminal, and enter the following command to change
    directory to the exercise directory.
----

$ cd ~/NickHudgins-c-sharp-material/module-1/01_Introduction_Tools/student-exercise/csharp-helloworld

Note, do not enter the beginning "$" character. It represents the prompt for
the command line. This convention is commonly used to visually separate the
actual command from other text in Unix documentation.


----
2.  What does the ~ (tilde) character in the above command to change directory
    refer to?
----

 Tide is the root directory or folder

----
3.  A good habit to develop, especially while you're developing your skills on
    the command line, is to confirm your location after changing directories.
    This can be easily accomplished with the "pwd" command.
----


$ pwd
/c/Users/nickh/NickHudgins-c-sharp-material/module-1/01_Introduction_Tools/student-exercise


The present working directory displayed should match the directory you changed
to in Exercise 1.  Note, the two may not match at the very beginning if you
used the tilde when changing directories.  The tilde is a convenience to save
you some typing.  The system resolves the tilde to the full location as it
changes directory, and the "pwd" command reflects this.


----
4.  Display a list of all the files and directories in your present working
    directory. Include all dot-files and dot-directories.  Recall the "all" and
    "long format" flags for the "ls" command.
----

$ ls -la
total 20
drwxr-xr-x 1 nickh 197121    0 Sep 16 15:22 ./
drwxr-xr-x 1 nickh 197121    0 Sep 16 15:22 ../
drwxr-xr-x 1 nickh 197121    0 Sep 16 15:22 csharp-helloworld/
-rw-r--r-- 1 nickh 197121 8485 Sep 16 16:23 introduction-to-tools-exercises.txt

----
5.  What do the "." and ".." directories displayed in the directory listing in
    Exercise 4 represent?
----

. represents the current directory you are in
.. represents the the parent directory

----
6.  What are the names of the files, including any dot-files, displayed in the
    directory listing in Exercise 4?
----

introduction-to-tools-exercises.txt


----
7.  What are the names of the directories, including any dot-directories, displayed in
    the directory listing in Exercise 4?
----

./
../
csharp-helloworld/



----
8.  Helloworld.sln is a Visual Studio project file. You will learn more about project
    files in later lectures. As for the exercise, it is sometimes necessary (and usually
    always interesting) to be able to view the contents of files while at the
    command line. A friendly and easy-to-use utility that allows you to do this
    is "less".

    "less" has two great features. First, it is a file viewer. You never have
    to worry about accidentally modifying the file, as you would if you opened it
    in an editor.  Second, it allows you to page-up, page-down, search, and other
    nifty navigation tasks, which can be really useful when files are big.

    View the Helloworld.sln file using "less".

    Or, for those who are more adventurous, you might want to try using "less" with a huge
    file like database/pagila.sql where the utility's navigation features really
    shine.

    Press Q to quit when you are finished viewing either of the files.
----

$ less Helloworld.sln

Or

$ less database/pagila.sql

You are encouraged to make "less" part of your standard command line toolkit.

<type or copy-paste the first five lines of either file here>

----
9.  This is good time to create a Git snapshot of your progress.  Usually,
    you'll want to check the Git status to review the list of files that
    have been modified, added, or deleted. Then you'll want to add and commit
    those changes to your local repository.

    Don't forget to save your changes to this text file before creating the snapshot.
----

Did you remember to save "introduction-to-tools-exercise.txt"?

$ git status
<type or copy-paste the result here>

$ git add -A
<type or copy-paste the result here>

$ git commit -m "Good stopping point"
<type or copy-paste the result here>

Note, you do not need to push this commit up to BitBucket at this time. The
typical Git workflow is to make many small commits to your local repo while
working. You push up to BitBucket when you're ready to share.

You'll be asked to push to BitBucket twice in this exercise, once a bit further
along, and then at the end.


----
10.  Change into Helloworld directory under csharp-helloworld.
    Show your present working directory after the change.
----

$ cd csharp-helloworld
$pwd
C:\Users\nickh\nickhudgins-c-sharp-material\module-1\01_Introduction_Tools\student-exercise\csharp-helloworld


----
11. Does the change directory command in Exercise 10 use a relative, or absolute
    path?
----

absolute

----
12. List all the files and directories, including any dot-files or dot-directories in
    your present working directory.
----
$ ls
database/ Helloworld/ Helloworld.sln


----
13. "Program.cs" is the sole source code file of the Helloworld application.
    Make a backup of the file named "Program.cs.backup" using the copy
    command.
----

$ cp Program.cs Helloworld.cs.backup

The "cp" parameters are the name of the source file followed by the name of the
destination file.

$ ls
App.config            Helloworld.csproj  Properties/
bin/                  obj/
Helloworld.cs.backup  Program.cs


----
14. Rename "Program.cs.backup" to "Program.cs.copy" using the move
    command. (There is no rename command in UNIX.)
----

$ mv Program.cs.backup Program.cs.copy

The "mv" parameters are the existing name of the file followed by the new name
of the file.

$ mv Helloworld.cs.backup Helloworld.cs.copy
// no result

new files and folders 

New list of files and folders in directory

$ ls
App.config  Helloworld.cs.copy  obj/        Properties/
bin/        Hellowworld.csproj  Program.cs


----
15. Let's call this a "feature complete" point in the exercises, and not only
    check-in to the local repository, but also push our work to our remote repository in
    BitBucket. Pushing our work to a remote repository is a great way to ensure that we
    don't accidentally lose work stored locally, and also enables us to share work with
    others on our teams.
----

$ <enter the Git command to display status>

$ git status (from m1-w1d1-introduction-to-tools-exercises)
On branch master
Your branch is ahead of 'origin/master' by 2 commits.
  (use "git push" to publish your local commits)
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   csharp-helloworld/Helloworld/Helloworld.cs.copy
        modified:   introduction-to-tools-exercises.txt


$ git commit -m "homework commit"                             **(commiting what I am currently working on as of 11/10)**
[master 18a255b] homework commit
 15 files changed, 223 insertions(+), 144 deletions(-)
 create mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Models/User.cs
 delete mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Home/About.cshtml
 delete mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Home/Contact.cshtml
 rewrite module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Home/Index.cshtml (99%)
 delete mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Home/Privacy.cshtml
 create mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Users/Login.cshtml
 create mode 100644 module-3/09-Data-Validation-and-View-Models/student-exercise/Validation.Web/Views/Users/Register.cshtml

$ git push origin master
Enumerating objects: 409, done.
Counting objects: 100% (409/409), done.
Delta compression using up to 8 threads
Compressing objects: 100% (365/365), done.
Writing objects: 100% (403/403), 143.89 KiB | 3.89 MiB/s, done.
Total 403 (delta 173), reused 85 (delta 18)
remote: Resolving deltas: 100% (173/173), completed with 4 local objects.
remote: Checking connectivity: 403, done.
To https://bitbucket.org/te-cbus-cohort-9/nickhudgins-c-sharp-material.git
   d74af62..18a255b  master -> master

----
16. Delete the backup file, "Program.cs.copy" using the remove command.
----

$ rm Program.cs.copy

The "rm" parameter is the name of the file to be deleted.

$ ls
App.config  Helloworld.csproj  Program.cs
bin/        obj/               Properties/


----
17. Change directory to the csharp-helloworld directory using either one of the
    commands shown below.
----

$ cd ..

or

$ cd ~/YOURNAME-c-sharp-material/module-1/01_Introduction_Tools/student-exercise/csharp-helloworld

Note the first alternative relies upon the ".." parent directory notation.  In
essence it says to change directory from the current directory's parent's parent's
parent's parent's parent.  You'll know you're getting comfortable at the
command line when that seems natural.

Regardless of the option you chose, check your new location.

$pwd
C:\Users\nickh\nickhudgins-c-sharp-material\module-1\01_Introduction_Tools\student-exercise\csharp-helloworld


----
18. Create a documentation directory named "docs" under csharp-helloworld, and then
    change into it.
----

$ mkdir docs
$ cd docs
$ pwd
C:\Users\nickh\nickhudgins-c-sharp-material\module-1\01_Introduction_Tools\student-exercise\csharp-helloworld

----
19. Create a new file name "readme.txt" using VS Code, and add the text
    "Hello, this is the beginning of the application's documentation."
----

$ code readme.txt

Don't forget to save the file in VS Code!


----
20. As a final exercise, please perform the following commands to save and push your
    work so it can be reviewed by an instructor.
----

$ git status

$ git add .

$ git commit -a -m "commit"

$ git push

$ <enter the Git command to save local repository to BitBucket>
